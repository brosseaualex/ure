/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */


plugins {
    // IntelliJ integration
    id 'idea'

    // Dagger
    id "net.ltgt.apt" version "0.10"

    // Shadow for fatjar build
    id 'com.github.johnrengelman.shadow' version '2.0.4'

    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
        output.resourcesDir = 'build/classes/main'
    }
}

// Exclude all resources from the jar
jar {
    processResources.exclude('*')
}

applicationDistribution.from('resources') {
    into 'bin/resources'
}

// Allows the 'run' task to see the directories on the classpath
run {
    classpath += files('resources')
}

startScripts {
    classpath += files('src/dist/placeholder')
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('@rem Find java.exe', 'set JAVA_HOME=%JAVA_HOME%/jre')
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\placeholder', '%APP_HOME%\\bin\\resources')
        unixScriptFile.text = unixScriptFile.text.replace('APP_NAME="URE"', 'APP_NAME="URE"\nJAVA_HOME=$JAVA_HOME/jre')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/placeholder', '$APP_HOME/bin/resources')
        unixScriptFile.text = unixScriptFile.text.replace('exec "$JAVACMD"', 'cd "$( dirname "${BASH_SOURCE[0]}" )" \nexec "$JAVACMD"')
    }
}

// Define the main class for the application
mainClassName = 'ure.ExampleMain'

if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
}

project.ext.lwjglVersion = "3.1.6"

dependencies {

    compile "com.fasterxml.jackson.core:jackson-core:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.6"
    compile "org.reflections:reflections:0.9.11"
    compile "org.joml:joml:1.9.9"
    compile "commons-io:commons-io:2.6"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-logging:commons-logging:1.2"
    compile 'com.google.guava:guava:25.1-jre'

    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
    compile "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
    compile "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-linux"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-macos"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-windows"
    compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-openal:($lwjglVersion}:natives-linux"
    compile "org.lwjgl:lwjgl-openal:($lwjglVersion}:natives-macos"
    compile "org.lwjgl:lwjgl-openal:($lwjglVersion}:natives-windows"

    // Dagger
    compile 'com.google.dagger:dagger:2.16'
    apt 'com.google.dagger:dagger-compiler:2.16'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
